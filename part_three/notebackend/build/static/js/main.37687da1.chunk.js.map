{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oMAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCI3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACO,KAIT,qBAAKJ,UAAU,QAAf,SACII,KCQOC,EAfA,WAOb,OACE,sBAAKC,MAPa,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIZ,UACI,uBACA,2G,gBCXFC,EAAU,aAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GAErBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiBpB,EAdA,SAACC,GAGZ,OAFgBL,IACXM,KAAKP,EAASM,GAEdH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAUpB,EAPA,SAACG,EAAIF,GAGhB,OAFgBL,IACXQ,IADW,UACJT,EADI,YACOQ,GAAMF,GAExBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8EpBK,EA3FH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,0BAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAMrBC,qBAAU,WACRC,IAEGnB,MAAK,SAAAoB,GACJT,EAASS,QAGZ,IAEHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAyCMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAA1C,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASyB,IACvB,8BACE,yBAAQ3B,QAAS,kBAAM0B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAAA3C,GAAI,OACnB,cAAC,EAAD,CACMA,KAAMA,EACNC,iBAAkB,kBAxCL,SAACqB,GAC1B,IAAMtB,EAAO2B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,KAAOA,KAChCwB,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDiC,EACUd,EAAIwB,GAAa7B,MAAK,SAAA8B,GAC5BnB,EAASD,EAAMgB,KAAI,SAAA3C,GAAI,OAAIA,EAAKsB,KAAOA,EAAKtB,EAAO+C,SAEpDC,OAAM,SAAAC,GACLf,EAAgB,SAAD,OACJlC,EAAKK,QADD,6CAGf6C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAG,GAAC,OAAIA,EAAEvB,KAAOA,SAyBJ6B,CAAmBnD,EAAKsB,MAF3CtB,EAAKsB,SAMpB,uBAAM8B,SA9DM,SAACC,GACfA,EAAEC,iBAEF,IAAMC,EAAa,CACjBlD,QAASwB,EACT2B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BtC,GAAIK,EAAMa,OAAS,GAGrBJ,EACUmB,GACLtC,MAAK,SAAA8B,GACJnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,QAgDf,UACE,uBACEgC,MAAOjC,EACPkC,SA5BiB,SAACV,GACxBvB,EAAWuB,EAAEW,OAAOF,UA6BhB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCvFNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.37687da1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : \r\n      'make important'\r\n  \r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n      return null;\r\n  }\r\n  \r\n  return (\r\n    <div className='error'>\r\n      { message }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request\r\n        .then(response => response.data);\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios\r\n        .post(baseUrl, newObject);\r\n    return request\r\n        .then(response => response.data);\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios\r\n        .put(`${baseUrl}/${id}`, newObject);\r\n    return request\r\n        .then(response => response.data);\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n      \n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (e) => {\n    e.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        });\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from the server...`\n        )\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      })\n  }\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>     \n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} \n                note={note} \n                toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}